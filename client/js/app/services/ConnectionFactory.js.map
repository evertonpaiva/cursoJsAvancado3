{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAW;;AAEhC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;;AAEA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAc;AAAA;;AAEV,kBAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACH;;AALL;AAAA;AAAA,4CAQ2B;;AAEnB,uBAAO,IAAIC,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAErC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;;AAE/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAHD;;AAKAR,gCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,4BAAG,CAACf,UAAJ,EAAgB;AACZA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBAVD;;AAYAM,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAJD;AAKH,iBA1BM,CAAP;AA2BH;AArCL;AAAA;AAAA,0CAuCyBrB,UAvCzB,EAuCqC;AAC7BH,uBAAOyB,OAAP,CAAgB,iBAAS;;AAErB,wBAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACIzB,WAAW0B,iBAAX,CAA6BD,KAA7B;;AAEJzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,iBAND;AAOH;AA/CL;AAAA;AAAA,8CAiD4B;;AAEpB,oBAAG5B,UAAH,EAAe;AACXC;AACAD,iCAAa,IAAb;AACH;AACJ;AAvDL;;AAAA;AAAA;AA0DH,CApEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function (){\n\n    const stores = ['negociacoes'];\n    const version = 4;\n    const dbName = 'aluraframe';\n\n    var connection = null;\n\n    var close = null;\n\n    return class ConnectionFactory {\n\n        constructor() {\n\n            throw new Error('Não é possível criar instância de ConnectionFactory');\n        }\n\n\n        static getConnection() {\n\n            return new Promise ((resolve, reject) => {\n\n                let openRequest = window.indexedDB.open(dbName, version);\n\n                openRequest.onupgradeneeded = e => {\n\n                    ConnectionFactory._createStores(e.target.result);\n                };\n\n                openRequest.onsuccess = e => {\n\n                    if(!connection) {\n                        connection = e.target.result;\n                        close = connection.close.bind(connection);\n                        connection.close = function() {\n                            throw new Error('Você não pode fechar diretamente a conexão');\n                        }\n                    }\n                    resolve(connection);\n                };\n\n                openRequest.onerror = e => {\n                    console.log(e.target.error);\n\n                    reject(e.target.error.name);\n                };\n            });\n        }\n\n        static _createStores(connection) {\n            stores.forEach( store => {\n\n                if (connection.objectStoreNames.contains(store))\n                    connection.deleteObjectStore(store);\n\n                connection.createObjectStore(store, { autoIncrement: true});\n            });\n        }\n\n        static closeConnection(){\n\n            if(connection) {\n                close();\n                connection = null;\n            }\n        }\n    }\n\n})();\n\n"]}